// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// generator_slow //
// -------------- //

#define generator_slow_wrap_target 0
#define generator_slow_wrap 3

static const uint16_t generator_slow_program_instructions[] = {
            //     .wrap_target
    0x7020, //  0: out    x, 32           side 1     
    0x1041, //  1: jmp    x--, 1          side 1     
    0x6020, //  2: out    x, 32           side 0     
    0x0043, //  3: jmp    x--, 3          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_slow_program = {
    .instructions = generator_slow_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config generator_slow_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_slow_wrap_target, offset + generator_slow_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// --------------- //
// generator_short //
// --------------- //

#define generator_short_wrap_target 0
#define generator_short_wrap 1

static const uint16_t generator_short_program_instructions[] = {
            //     .wrap_target
    0xb042, //  0: nop                    side 1     
    0xa042, //  1: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_short_program = {
    .instructions = generator_short_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config generator_short_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_short_wrap_target, offset + generator_short_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// -------------- //
// generator_long //
// -------------- //

#define generator_long_wrap_target 0
#define generator_long_wrap 31

static const uint16_t generator_long_program_instructions[] = {
            //     .wrap_target
    0xb042, //  0: nop                    side 1     
    0xa042, //  1: nop                    side 0     
    0xb042, //  2: nop                    side 1     
    0xa042, //  3: nop                    side 0     
    0xb042, //  4: nop                    side 1     
    0xa042, //  5: nop                    side 0     
    0xb042, //  6: nop                    side 1     
    0xa042, //  7: nop                    side 0     
    0xb042, //  8: nop                    side 1     
    0xa042, //  9: nop                    side 0     
    0xb042, // 10: nop                    side 1     
    0xa042, // 11: nop                    side 0     
    0xb042, // 12: nop                    side 1     
    0xa042, // 13: nop                    side 0     
    0xb042, // 14: nop                    side 1     
    0xa042, // 15: nop                    side 0     
    0xb042, // 16: nop                    side 1     
    0xa042, // 17: nop                    side 0     
    0xb042, // 18: nop                    side 1     
    0xa042, // 19: nop                    side 0     
    0xb042, // 20: nop                    side 1     
    0xa042, // 21: nop                    side 0     
    0xb042, // 22: nop                    side 1     
    0xa042, // 23: nop                    side 0     
    0xb042, // 24: nop                    side 1     
    0xa042, // 25: nop                    side 0     
    0xb042, // 26: nop                    side 1     
    0xa042, // 27: nop                    side 0     
    0xb042, // 28: nop                    side 1     
    0xa042, // 29: nop                    side 0     
    0xb042, // 30: nop                    side 1     
    0xa042, // 31: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_long_program = {
    .instructions = generator_long_program_instructions,
    .length = 32,
    .origin = -1,
};

static inline pio_sm_config generator_long_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_long_wrap_target, offset + generator_long_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ----------------- //
// generator_fastbit //
// ----------------- //

#define generator_fastbit_wrap_target 0
#define generator_fastbit_wrap 0

static const uint16_t generator_fastbit_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_fastbit_program = {
    .instructions = generator_fastbit_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config generator_fastbit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_fastbit_wrap_target, offset + generator_fastbit_wrap);
    return c;
}
#endif

// ----------------- //
// generator_slowbit //
// ----------------- //

#define generator_slowbit_wrap_target 0
#define generator_slowbit_wrap 4

static const uint16_t generator_slowbit_program_instructions[] = {
            //     .wrap_target
    0x6501, //  0: out    pins, 1                [5] 
    0xe535, //  1: set    x, 21                  [5] 
    0xeb54, //  2: set    y, 20                  [11]
    0x1483, //  3: jmp    y--, 3                 [20]
    0x0042, //  4: jmp    x--, 2                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_slowbit_program = {
    .instructions = generator_slowbit_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config generator_slowbit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_slowbit_wrap_target, offset + generator_slowbit_wrap);
    return c;
}
#endif

