// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// analyzer //
// -------- //

#define analyzer_wrap_target 0
#define analyzer_wrap 0

static const uint16_t analyzer_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program analyzer_program = {
    .instructions = analyzer_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config analyzer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + analyzer_wrap_target, offset + analyzer_wrap);
    return c;
}
#endif

// --------- //
// generator //
// --------- //

#define generator_wrap_target 0
#define generator_wrap 0

static const uint16_t generator_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program generator_program = {
    .instructions = generator_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config generator_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + generator_wrap_target, offset + generator_wrap);
    return c;
}
#endif

