// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// freqmet1 //
// -------- //

#define freqmet1_wrap_target 0
#define freqmet1_wrap 16

#define freqmet1_offset_medium_start 0u
#define freqmet1_offset_medium_target 5u
#define freqmet1_offset_medium_wrap 10u
#define freqmet1_offset_low_start 11u
#define freqmet1_offset_low_target 11u
#define freqmet1_offset_low_wrap 16u

static const uint16_t freqmet1_program_instructions[] = {
            //     .wrap_target
    0xe020, //  0: set    x, 0                       
    0xa04b, //  1: mov    y, !null                   
    0x00c2, //  2: jmp    pin, 2                     
    0x00c5, //  3: jmp    pin, 5                     
    0x0003, //  4: jmp    3                          
    0x0086, //  5: jmp    y--, 6                     
    0x00c5, //  6: jmp    pin, 5                     
    0x00c9, //  7: jmp    pin, 9                     
    0x0087, //  8: jmp    y--, 7                     
    0xa0e2, //  9: mov    osr, y                     
    0x0045, // 10: jmp    x--, 5                     
    0xa04b, // 11: mov    y, !null                   
    0x008d, // 12: jmp    y--, 13                    
    0x00cc, // 13: jmp    pin, 12                    
    0x00d0, // 14: jmp    pin, 16                    
    0x008e, // 15: jmp    y--, 14                    
    0x4040, // 16: in     y, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program freqmet1_program = {
    .instructions = freqmet1_program_instructions,
    .length = 17,
    .origin = -1,
};

static inline pio_sm_config freqmet1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + freqmet1_wrap_target, offset + freqmet1_wrap);
    return c;
}
#endif

// -------- //
// freqmet2 //
// -------- //

#define freqmet2_wrap_target 0
#define freqmet2_wrap 18

#define freqmet2_offset_high_start 0u
#define freqmet2_offset_high_target 0u
#define freqmet2_offset_high_wrap 0u
#define freqmet2_offset_time_start 1u
#define freqmet2_offset_time_target 6u
#define freqmet2_offset_time_wrap 12u
#define freqmet2_offset_pulse_start 13u
#define freqmet2_offset_pulse_target 14u
#define freqmet2_offset_pulse_wrap 18u

static const uint16_t freqmet2_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1                    
    0xe040, //  1: set    y, 0                       
    0x6021, //  2: out    x, 1                       
    0x0042, //  3: jmp    x--, 2                     
    0x6021, //  4: out    x, 1                       
    0x0024, //  5: jmp    !x, 4                      
    0xa0c2, //  6: mov    isr, y                     
    0x0088, //  7: jmp    y--, 8                     
    0x6021, //  8: out    x, 1                       
    0x0047, //  9: jmp    x--, 7                     
    0x008b, // 10: jmp    y--, 11                    
    0x6021, // 11: out    x, 1                       
    0x002a, // 12: jmp    !x, 10                     
    0xe040, // 13: set    y, 0                       
    0x6021, // 14: out    x, 1                       
    0x004e, // 15: jmp    x--, 14                    
    0x6021, // 16: out    x, 1                       
    0x0030, // 17: jmp    !x, 16                     
    0x008e, // 18: jmp    y--, 14                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program freqmet2_program = {
    .instructions = freqmet2_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config freqmet2_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + freqmet2_wrap_target, offset + freqmet2_wrap);
    return c;
}
#endif

